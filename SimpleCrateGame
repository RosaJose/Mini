package ch.epfl.cs107.play.game.tutorial;

import ch.epfl.cs107.play.game.Game;
import ch.epfl.cs107.play.game.actor.ImageGraphics;
import ch.epfl.cs107.play.io.FileSystem;
import ch.epfl.cs107.play.math.Entity;
import ch.epfl.cs107.play.math.EntityBuilder;
import ch.epfl.cs107.play.math.PartBuilder;
import ch.epfl.cs107.play.math.Polygon;
import ch.epfl.cs107.play.math.Transform;
import ch.epfl.cs107.play.math.Vector;
import ch.epfl.cs107.play.math.World;
import ch.epfl.cs107.play.window.Window;

/**
 * Simple game, to show basic the basic architecture
 */
public class SimpleCrateGame implements Game {
	private ImageGraphics graphics;
	private ImageGraphics graphicbox;
	
	private Entity block;
	private Entity crate;

    // Store context
    private Window window;
    
    // We need our physics engine
    private World world;
    
	@Override
	public boolean begin(Window window, FileSystem fileSystem) {
	
	world = new World();
    	world.setGravity(new Vector(0.0f, -9.81f));
  	
        // Store context
        this.window = window;
    	
    	
    	
    	// create two new objects to build
    EntityBuilder entityBuilder1 = world.createEntityBuilder();
    EntityBuilder entityBuilder2 = world.createEntityBuilder();
    
    //make sure it doesnt move
 	entityBuilder1.setFixed(true);
 	entityBuilder2.setFixed(false);
 	
 	//define initial position
 	entityBuilder1.setPosition(new Vector(1.0f, 0.5f));
 	entityBuilder2.setPosition(new Vector(0.2f, 4.0f));
 	
 	//build body
 	block = entityBuilder1.build();
 	// At this point, your body is in the world, but it has no geometry // You need to use another builder to add shapes
 	PartBuilder partBuilder = block.createPartBuilder();
 	// Create a square polygon, and set the shape of the builder to
 	//this polygon
 	Polygon polygon = new Polygon(
 			new Vector(0.0f, 0.0f), 
 			new Vector(1.0f, 0.0f), 
 			new Vector(1.0f, 1.0f),
 			new Vector(0.0f, 1.0f) );
 	partBuilder.setShape(polygon);
 	partBuilder.setFriction(0.5f);

 	// Finally, do not forget the following line.
 	partBuilder.build();
 	// Note : we do not need to keep a reference on partBuilder
	
 	//assigne geometric form to crate
 	crate = entityBuilder2.build();
	PartBuilder partBuilder2 = crate.createPartBuilder();
	partBuilder2.setShape(polygon);
 	partBuilder2.build();
	
	
	//graphics
 	// shape of the cube
	graphics = new ImageGraphics("stone.broken.4.png", 1, 1);
	graphicbox = new ImageGraphics("box.4.png",1,1);
	// Transparency can be chosen for each drawing (0.0 - transparent, 1.0 - opaque)
	graphics.setAlpha(1.0f);
	graphicbox.setAlpha(1.0f);
	// Additionally, you can choose a depth when drawing
	// Therefore, you could draw behind what you have already done 
	graphics.setDepth(10f);
	graphicbox.setDepth(10f);
	//
	graphics.setParent(block);
	
	graphicbox.setParent(crate);
 	
		return true;
	}
	 // This event is called at each frame
    @Override
    public void update(float deltaTime) {
    	
    	// Game logic comes here // Nothing to do, yet
    	// Simulate physics
    	// Our body is fixed, though, nothing will move world.update(deltaTime);
    	// echelle a laquelle on voit l'objet
    	world.update(deltaTime);
    	window.setRelativeTransform(Transform.I.scaled(10.0f));
    	graphics.draw(window);
    	graphicbox.draw(window);

        
      
        // The actual rendering will be done now, by the program loop
    }

    // This event is raised after game ends, to release additional resources
    @Override
    public void end() {
        // Empty on purpose, no cleanup required yet
    }
    
}
